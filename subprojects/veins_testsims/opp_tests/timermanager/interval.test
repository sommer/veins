//
// Copyright (C) 2021 Max Schettler <schettler@ccs-labs.org>
//
// Documentation for these modules is at http://veins.car2x.org/
//
// SPDX-License-Identifier: GPL-2.0-or-later
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

%description
Ensure timers are called at appropriate times.

%file: test.ned

simple Module {}

network Test
{
    submodules:
        node: Module;
}


%file: test.cc
#include "veins/veins.h"
#include "veins/modules/utility/TimerManager.h"

namespace @TESTNAME@ {

class Module : public cSimpleModule {
public:
    void initialize(int stage) override;
    void handleMessage(cMessage* msg) override { timers.handleMessage(msg); }
protected:
    veins::TimerManager timers{this};
};

Define_Module(Module);

void Module::initialize(int stage)
{
    timers.create(
        veins::TimerSpecification([this]() { EV << "timer 1 called at " << simTime() << std::endl; })
        .interval(1).repetitions(3)
    );

    timers.create(
        veins::TimerSpecification([this]() { EV << "timer 2 called at " << simTime() << std::endl; })
        .interval(2.8).repetitions(2)
    );

    int i = 1;
    timers.create(
        veins::TimerSpecification([this]() { EV << "timer 3 called at " << simTime() << std::endl; })
        .interval([i]() mutable { return i <= 3 ? i++ : -1;})
    );
}

} // namespace @TESTNAME@

%contains: stdout
timer 1 called at 1
%contains: stdout
timer 1 called at 2
%contains: stdout
timer 1 called at 3

%contains: stdout
timer 2 called at 2.8
%contains: stdout
timer 2 called at 5.6

%contains: stdout
timer 3 called at 1
%contains: stdout
timer 3 called at 3
%contains: stdout
timer 3 called at 6
%not-contains: stdout
timer 3 called at 10
